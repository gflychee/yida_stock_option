Help on module pyyd:

NAME
    pyyd - YDApi for Python

CLASSES
    builtins.object
        YDApi
    
    class YDApi(builtins.object)
     |  Python YDApi class. 
     |  YDApi(listener, user, password, config='ydclient.ini')
     |      listener methods(will be called if defined):
     |          login(error_number:int, max_order_ref:int, is_admin:bool)
     |              Called when login succeeded or failed.
     |          caughtup()
     |              Called when all init data and previous orders and trades are received.
     |          trading_segment(exchange:str, time:str)
     |          trading_segment_detail(segment_detail)
     |              segment_detail:
     |                  exchange
     |                  product
     |                  instrument
     |                  trading_segment_time
     |                  trading_status: 0-no trading, 1-continuous trading, 2-auction
     |          comb_position(position_info)
     |          order(order_info)
     |          trade(trade_info)
     |          failed_cancel_order(failed_cancel_info)
     |          quote(quote_info)
     |          failed_cancel_quote(failed_cancel_info)
     |          request_for_quote(rfq_info)
     |          marketdata(marketdata_info)
     |          exchange_system_id(system_id_info)
     |          spot_position(spot_position_info)
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  account_summary(account='')
     |      Get account summary.
     |  
     |  accounts()
     |      Return all accounts iterator.
     |  
     |  auto_create_dce_comb_position(comb_types=[])
     |      Try to create a new DCE comb position.
     |      comb_types: a list of comb position types to be processed. If empty all types are processed.
     |      Return: a tuple of comb position def id and comb hedge id if an opportunity was found. Otherwise None
     |  
     |  cancel_multi_orders(orders, account='')
     |      Cancel multiple orders. Arguments:
     |      orders (object sequence): Each element may have following attributes(refer to cancel_order() for possible values of each attribute):
     |          exchange(str): mandatory
     |          order_sysid (str)
     |          cstype (int)
     |          conn (int)
     |          order_ref (int)
     |          order_group (int)
     |      account (str): trading account(default '', i.e. current account)
     |  
     |  cancel_multi_quotes(quotes, account='')
     |      Cancel multiple quotes. Arguments:
     |      quotes (object sequence): Each element may have following attributes(refer to cancel_quote() for possible values of each attribute):
     |          exchange(str): mandatory
     |          quote_sysid (str)
     |          cstype (int)
     |          conn (int)
     |          order_ref (int)
     |          order_group (int)
     |      account (str): trading account(default '', i.e. current account)
     |  
     |  cancel_order(exchange, order_sysid=-1, cstype=0, conn=0, flag=0, account='', order_ref=0, order_group=0)
     |      Cancel an order. Keyword arguments:
     |      exchange (str): exchange id
     |      order_sysid (int): order id from exchange, negative value means cancel by order_ref
     |      flag (int):0-normal, 2-option execute, 3-abandon execute, 4-request for quote, 5-comb position, 6-exec together, 7-DCE mark, 8-option position offset, 9-SSE freeze option underlying, 10-Cover and position conversion.
     |      other arguments: refer to insert_order() document
     |  
     |  cancel_quote(exchange, quote_sysid=-1, cstype=0, conn=0, flag=0, account='', order_ref=0, order_group=0)
     |      Cancel quote. Keyword arguments:
     |      exchange (str): exchange id
     |      quote_sysid (int): order id from exchange, negative value means cancel by order_ref
     |      other arguments: refer to insert_quote() document
     |  
     |  comb_position_defs()
     |      Return all comb position definitions iterator.
     |  
     |  commission_rate(instrument, hedge=1, account='')
     |      Get commission rate for given instrument and hedge type.
     |  
     |  exchanges()
     |      Return all exchanges iterator.
     |  
     |  find_comb_position_details(comb_position_def='', comb_hedge=1, account='', instrument='', long_short=0, include_split=False)
     |      Find comb position details with given conditions.
     |  
     |  find_orders(start_time='', end_time='', flag=0, comb_posi_def='', comb_hedge=1, instrument='', product='', exchange='', account='')
     |      Find orders with given conditions.
     |  
     |  find_positions(position_date=-1, long_short=-1, hedge=-1, instrument='', product='', exchange='', account='')
     |      Find positions with given conditions.
     |  
     |  find_quotes(start_time='', end_time='', instrument='', product='', exchange='', account='')
     |      Find quotes with given conditions.
     |  
     |  find_spot_positions(instrument='', product='', exchange='', account='')
     |      Find spot positions with given conditions.
     |  
     |  find_trades(start_time='', end_time='', instrument='', product='', exchange='', account='')
     |      Find trades with given conditions.
     |  
     |  get_account(account_id)
     |      Get account info.
     |  
     |  get_comb_position_def(comb_position_id, comb_hedge_flag)
     |      Get comb position definition info.
     |  
     |  get_comb_position_detail(comb_position_detail_id)
     |      Get comb position detail info (for SSE and SZSE).
     |  
     |  get_comb_position_margin(comb_position_def, comb_hedge=1, account='')
     |      Get comb position margin.
     |  
     |  get_exchange(exchange_id)
     |      Get exchange info.
     |  
     |  get_id_from_exchange(exchange_id, id_type, id_in_system)
     |      Get original ID from exchange based on ID in yd system.
     |      id_type: refer to ydAPI document
     |  
     |  get_instrument(instrument_id)
     |      Get instrument info.
     |  
     |  get_margin(instrument, hedge=1, long_short=3, price=0, account='')
     |      Get margin for given instrument, hedge type, and position type. Arguments:
     |      price: open price for margin calculation (if current margin calculation method need). Presettlement price is used if price==0.
     |      Refer to insert_order() for meaning and value of other arguments
     |  
     |  get_marketdata(instrument_id)
     |      Get instrument marketdata.
     |  
     |  get_order(order_ref=-1, account='', exchange='', order_sysid=-1, flag=0, order_group=0)
     |      Get order info by order ref or sysid.
     |  
     |  get_product(product_id)
     |      Get product info.
     |  
     |  get_quote(order_ref=-1, account='', exchange='', quote_sysid=-1, order_group=0)
     |      Get quote info by ref or sysid.
     |  
     |  get_quote_derived_order(order_ref, direction, order_group=0, account='')
     |      Get a quote derived order.
     |  
     |  get_request_for_quote(instrument)
     |      Get request for quote info.
     |  
     |  get_system_param(name, target)
     |      Get system parameter value.
     |  
     |  init_finished()
     |      Return True if YDApi has finished init
     |  
     |  insert_multi_orders(orders, account='', checked=0)
     |      Insert multiple orders. Arguments:
     |      orders (object sequence): Each element may have following attributes (refer to insert_order() for value of each attribute):
     |          instrument(str): mandatory
     |          action (int)
     |          open_close (int)
     |          volume (int)
     |          price (float)
     |          type (int)
     |          order_ref (int)
     |          hedge (int)
     |          cstype (int)
     |          conn (int)
     |          order_group (int)
     |          order_ref_control (int)
     |      account (str): trading account(default '', i.e. current account)
     |  
     |  insert_multi_quotes(quotes, account='')
     |      Insert multiple quotes. Arguments:
     |      quotes (object sequence): Each element may have following attributes (refer to insert_quote() for values of each attribute):
     |          instrument(str): mandatory
     |          bid_open_close (int)
     |          bid_volume (int)
     |          bid_price (float)
     |          bid_hedge (int)
     |          ask_open_close (int)
     |          ask_volume (int)
     |          ask_price (float)
     |          ask_hedge (int)
     |          order_ref (int)
     |          cstype (int)
     |          conn (int)
     |          flag (int)
     |          order_group (int)
     |          order_ref_control (int)
     |      account (str): trading account(default '', i.e. current account)
     |  
     |  insert_order(...)
     |      Put a new order. Keyword arguments:
     |      instrument (str): Instrument ID. Must be given for non comb position orders
     |      action (int): 0-buy, 1-sell for normal orders; 0-make, 1-split for comb position orders(default 0)
     |      open_close (int): 0-open, 1-close, 3-close today, 4-close yesterday(default 0)
     |      volume (int): default 1
     |      price (float): default 0
     |      type (int): order type, 0-limited price order, 1-FAK, 2-market order, 3-FOK (default 0)
     |      order_ref (int): client assigned reference of the order, default 0
     |      hedge (int): for normal orders 1-speculation, 2-arbitrage, 3-hedge
     |      comb_hedge (int): for comb positoin orders 1-specspec, 2-spechedge, 3-hedgehedge, 4-hedgespec
     |      cstype (int): Connection selection type, 0-any, 1-fixed, 2-preferred(default 0)
     |      conn (int): Connection id if `cstype` is 1 or 2 (default 0)
     |      flag (int):0-normal, 2-option execute, 3-abandon execute, 4-request for quote, 5-comb position, 6-option execution together, 7-position offset(default 0)
     |      account (str): trading account(default ``, i.e. current account)
     |      checked (int): 0-the order is not checked before it's sent to ydServer, 1-check before sent to ydServer, 2-check only, not sending order to ydServer (default 0)
     |      comb_position_def (str): comb position definition id, must be given for comb position orders
     |      comb_position_id (str): comb position detail id, needed by SSE decomb orders
     |      instrument2 (str): second instrument id, must be given for option execute together orders
     |      order_group (int): group of order_ref (default 0)
     |      order_ref_control (int): for groups other than group 0, 0-incremental, 1-strictly increment by one (default 0)
     |      trigger_type (int): 0-not a trigger order, 1-stop profit, 2-stop loss (default 0)
     |      trigger_price (float): default 0
     |  
     |  insert_quote(...)
     |      Insert new quote. Keyword arguments:
     |      instrument (str): Instrument ID. Must be given
     |      bid_open_close (int): Refer to `open_close` argument to insert_order()
     |      bid_volume (int): default 1
     |      bid_price (float): default 0
     |      bid_hedge (int): refer to `hedge` argument to insert_order()
     |      ask_open_close (int): Refer to `open_close` argument to insert_order()
     |      ask_volume (int): default 1
     |      ask_price (float): default 0
     |      ask_hedge (int): refer to `hedge` argument to insert_order()
     |      order_ref (int): client assigned reference of the order, default 0
     |      cstype (int): refer to `cstype` argument to insert_order()
     |      conn (int): refer to `conn` argument to insert_order()
     |      flag (int): Quote flag, 1-response to request for quote(default 0)
     |      account (str): trading account(default ``, i.e. current account)
     |      checked (int): refer to 'checked' argument of insert_order
     |      order_group (int): refer to 'order_group' argument of insert_order
     |      order_ref_control (int): refer to 'order_ref_control' argument of insert_order
     |  
     |  instruments()
     |      Return all instruments iterator.
     |  
     |  margin_rate(instrument, hedge=1, account='')
     |      Get margin rate of given instrument and hedge type.
     |  
     |  my_account()
     |      Return my account info.
     |  
     |  next_order_ref(order_group=0, update=True)
     |      Get next order reference of given group.
     |  
     |  pre_positions()
     |      Return all pre-positions iterator.
     |  
     |  pre_spot_positions()
     |      Return all pre spot positions iterator.
     |  
     |  products()
     |      Return all products iterator.
     |  
     |  recalc_position_market_value()
     |      Recalculate position market value.
     |  
     |  select_connections(exchange, connection_list)
     |      Set priority of exchange connections.
     |      Each 4 bits in connection_list(64bit int) specifies a connection id, and lower bits has higher priority.
     |      Return True if request is sent successfully
     |  
     |  start()
     |      Start YDApi
     |  
     |  subscribe(instrument)
     |      Subscribe marketdata.
     |      instruemt (str): instrument id.
     |  
     |  system_params()
     |      Return all system parameters iterator.
     |  
     |  trading_day()
     |      get current trading day(available after login)
     |  
     |  unsubscribe(instrument)
     |      Unsubscribe marketdata.
     |      instruemt (str): instrument id.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.

FUNCTIONS
    nano_timestamp()
        Get ydAPI nanosecond timestamp.
    
    version()
        Get ydAPI version.

FILE
    /yd.src/ext/pyyd/lib/python3.9/site-packages/pyyd.cpython-39-x86_64-linux-gnu.so


